{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Desktop/smileai/src/Camera.js\";\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //import * as blazeface from '@tensorflow-models/blazeface';\n//import '@tensorflow/tfjs-backend-webgl';\n//import * as faceapi from 'face-api.js';\n\nimport LoadingOverlay from 'react-loading-overlay';\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport { Jumbotron, Row, Col } from 'react-bootstrap';\nimport { Button, Grid, CardMedia, CardActionArea, Card, CardActions, Box, Container, Typography } from '@material-ui/core';\nimport './styles.css';\nimport axios from 'axios';\nlet model, canvas, canvasCtx, video, newImage;\n\nclass Camera extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      video: null,\n      wait: false,\n      confidence: \"\"\n    }; //this.faceDetect = this.faceDetect.bind(this)\n    //this.drawBox = this.drawBox.bind(this)\n\n    this.sendPhoto = this.sendPhoto.bind(this);\n    this.disableButton = this.disableButton.bind(this);\n  }\n\n  componentDidMount() {\n    var constraints = {\n      audio: true,\n      video: {\n        width: 500,\n        height: 500\n      },\n      facingMode: {\n        exact: \"user\"\n      }\n    };\n    video = document.querySelector(\"#video\");\n    canvas = document.querySelector(\"#canvas\");\n    video.width = constraints[\"video\"][\"width\"];\n    video.height = constraints[\"video\"][\"height\"];\n    canvas.width = constraints[\"video\"][\"width\"];\n    canvas.height = constraints[\"video\"][\"height\"];\n    canvasCtx = canvas.getContext('2d');\n    canvasCtx.translate(canvas.width, 0);\n    canvasCtx.scale(-1, 1); //var loadModel = this.faceDetect;\n\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      video.srcObject = stream;\n      video.muted = true;\n\n      video.onloadedmetadata = () => {\n        video.play();\n      };\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n\n  async disableButton() {\n    if (this.state.wait == false) {\n      canvasCtx.clearRect(0, 0, 500, 500);\n      this.setState({\n        confidence: \"\"\n      });\n      await this.setState({\n        wait: true\n      }, () => this.sendPhoto());\n    }\n  }\n\n  async sendPhoto() {\n    var hidden_canvas = document.createElement('canvas');\n    hidden_canvas.width = canvas.width;\n    hidden_canvas.height = canvas.height;\n    var newCtx = hidden_canvas.getContext('2d');\n    newCtx.translate(hidden_canvas.width, 0);\n    newCtx.scale(-1, 1);\n    var newImage = document.createElement('img');\n    newCtx.drawImage(video, 0, 0, 500, 500);\n    newImage.src = hidden_canvas.toDataURL();\n    hidden_canvas.toBlob(blob => {\n      const formData = new FormData();\n      formData.append(\"image\", blob); //console.log(blob)\n\n      axios({\n        method: 'post',\n        url: 'http://127.0.0.1:8000/',\n        data: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(res => {\n        let top, left, size, color;\n\n        if (res.data.label == \"no face\") {\n          top = 100;\n          left = 100;\n          size = 200;\n          color = 'red';\n        } else {\n          top = res.data.top;\n          left = res.data.left;\n          size = res.data.bottom - top;\n\n          if (res.data.probability < 0.65) {\n            color = 'red';\n          } else {\n            color = 'green';\n          }\n        }\n\n        canvasCtx.drawImage(newImage, 0, 0, 500, 500);\n        canvasCtx.save();\n        canvasCtx.beginPath();\n        canvasCtx.rect(left, top, size, size);\n        canvasCtx.strokeStyle = color;\n        canvasCtx.stroke();\n        canvasCtx.translate(canvas.width, 0);\n        canvasCtx.scale(-1, 1);\n        canvasCtx.fillStyle = \"white\";\n        canvasCtx.font = \"20pt Arial\";\n        var prob = res.data.probability * 100;\n        prob = prob.toFixed(2) + \"%\";\n        var text = res.data.label;\n        canvasCtx.fillText(text, 500 - size - left, top);\n        canvasCtx.restore();\n        console.log(res);\n        this.setState({\n          wait: false\n        });\n        this.setState({\n          confidence: \"Probability of \" + text + \": \" + prob\n        });\n      }).catch(err => {//console.log(err)\n      });\n    });\n  }\n  /*async faceDetect() {\n  \tconst returnTensors = false;\n  \tconst predictions = await model.estimateFaces(video, returnTensors);\n  \t//const regionsToExtract = [ new faceapi.Rect(0, 0, 100, 100)]\n  \t//const predictions = await faceapi.detectAllFaces(video, new faceapi.faceRecognitionNetOptions())\n  \t//const descriptor = await faceapi.computeFaceDescriptor()\n  \t//console.log(descriptor)\n     \tawait this.drawBox(predictions)\n     \trequestAnimationFrame(this.faceDetect)\n  }\n  \tasync drawBox(predictions) {\n  \tif(predictions.length > 0) {\n  \t\tcanvasCtx.drawImage(video, 0,0)\n  \t\tfor (let i = 0; i < predictions.length; i++) {\n  \t\t\tconst start = predictions[i].topLeft;\n  \t\t\tconst end = predictions[i].bottomRight;\n  \t\t\tconst size = [end[0] - start[0], end[1] - start[1]];\n  \t\t\t// Render a bounding box over faces\n  \t\t\tcanvasCtx.beginPath();\n  \t\t\tcanvasCtx.rect(start[0], start[1], size[0], size[1]);\n  \t\t\tcanvasCtx.strokeStyle = 'black';\n  \t\t\tcanvasCtx.stroke(); \n  \t\t\tvar hidden_canvas = document.createElement('canvas');\n  \t\t\thidden_canvas.width = 720\n  \t\t\thidden_canvas.height = 500\n  \t\t\tvar newCtx = hidden_canvas.getContext('2d');\n  \t\t\t//newCtx.drawImage(canvas, canvas.width - size[0]-start[0], start[1], size[0], size[1], 0, 0, size[0],size[1])\n  \t\t\tnewCtx.drawImage(video,0,0,720,500)\n  \t\t\tnewImage.src = hidden_canvas.toDataURL()\n  \t\t\tawait hidden_canvas.toBlob((blob) => {\n  \t\t\t\tconst formData = new FormData();\n  \t\t\t\tformData.append(\"image\", blob);\n  \t\t\t\t//console.log(blob)\n  \t\t\t\taxios({\n  \t\t\t\t\t\tmethod: 'post',\n     \t\t\t\t\turl: 'http://127.0.0.1:8000/',\n     \t\t\t\t\tdata: formData,\n     \t\t\t\t\theaders: {'Content-Type': 'multipart/form-data' }\n  \t\t\t\t})\n  \t\t\t\t.then(res => {\n  \t\t\t\t\tconsole.log(res)\n  \t\t\t\t})\n  \t\t\t\t.catch(err =>{\n  \t\t\t\t\t//console.log(err)\n  \t\t\t\t})\n  \t\t\t})\n      \t}\n      }\n  }*/\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 10\n      }\n    }, \"smileAI\")), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, \"Simple AI that detects smiles.\")), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }, \"Convolutional neural network built only numpy (no deep learning libaries).\")))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      spacing: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(CardActionArea, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      id: \"video\",\n      autoPlay: true,\n      playsInline: true,\n      src: this.state.video,\n      className: \"video\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 10\n      }\n    })), /*#__PURE__*/React.createElement(CardActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.disableButton,\n      variant: \"contained\",\n      color: \"primary\",\n      disabled: this.state.wait,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 10\n      }\n    }, \"Take Picture\")))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CardActionArea, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 10\n      }\n    }))), /*#__PURE__*/React.createElement(CardActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 10\n      }\n    }, this.state.confidence)))));\n  }\n\n}\n\nexport default Camera;","map":{"version":3,"sources":["/Users/ethan/Desktop/smileai/src/Camera.js"],"names":["React","LoadingOverlay","PacmanLoader","Jumbotron","Row","Col","Button","Grid","CardMedia","CardActionArea","Card","CardActions","Box","Container","Typography","axios","model","canvas","canvasCtx","video","newImage","Camera","Component","constructor","props","state","wait","confidence","sendPhoto","bind","disableButton","componentDidMount","constraints","audio","width","height","facingMode","exact","document","querySelector","getContext","translate","scale","navigator","mediaDevices","getUserMedia","then","stream","srcObject","muted","onloadedmetadata","play","catch","err","console","log","clearRect","setState","hidden_canvas","createElement","newCtx","drawImage","src","toDataURL","toBlob","blob","formData","FormData","append","method","url","data","headers","res","top","left","size","color","label","bottom","probability","save","beginPath","rect","strokeStyle","stroke","fillStyle","font","prob","toFixed","text","fillText","restore","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sCAAP,C,CACA;AACA;AACA;;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,SAAQC,SAAR,EAAmBC,GAAnB,EAAwBC,GAAxB,QAAkC,iBAAlC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,cAAlC,EAAkDC,IAAlD,EAAwDC,WAAxD,EAAqEC,GAArE,EAA0EC,SAA1E,EAAqFC,UAArF,QAAsG,mBAAtG;AACA,OAAO,cAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAIC,KAAJ,EAAWC,MAAX,EAAkBC,SAAlB,EAA6BC,KAA7B,EAAoCC,QAApC;;AACA,MAAMC,MAAN,SAAqBrB,KAAK,CAACsB,SAA3B,CAAoC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAY;AACXN,MAAAA,KAAK,EAAE,IADI;AAEXO,MAAAA,IAAI,EAAE,KAFK;AAGXC,MAAAA,UAAU,EAAE;AAHD,KAAZ,CAFiB,CAOjB;AACA;;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA;;AACDE,EAAAA,iBAAiB,GAAE;AACf,QAAIC,WAAW,GAAG;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAed,MAAAA,KAAK,EAAE;AAAEe,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,MAAM,EAAE;AAAtB,OAAtB;AAAkDC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAA9D,KAAlB;AACAlB,IAAAA,KAAK,GAAGmB,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAR;AACAtB,IAAAA,MAAM,GAAGqB,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAT;AACHpB,IAAAA,KAAK,CAACe,KAAN,GAAcF,WAAW,CAAC,OAAD,CAAX,CAAqB,OAArB,CAAd;AACEb,IAAAA,KAAK,CAACgB,MAAN,GAAeH,WAAW,CAAC,OAAD,CAAX,CAAqB,QAArB,CAAf;AACAf,IAAAA,MAAM,CAACiB,KAAP,GAAeF,WAAW,CAAC,OAAD,CAAX,CAAqB,OAArB,CAAf;AACCf,IAAAA,MAAM,CAACkB,MAAP,GAAgBH,WAAW,CAAC,OAAD,CAAX,CAAqB,QAArB,CAAhB;AACAd,IAAAA,SAAS,GAAGD,MAAM,CAACuB,UAAP,CAAkB,IAAlB,CAAZ;AACAtB,IAAAA,SAAS,CAACuB,SAAV,CAAoBxB,MAAM,CAACiB,KAA3B,EAAkC,CAAlC;AACHhB,IAAAA,SAAS,CAACwB,KAAV,CAAgB,CAAC,CAAjB,EAAoB,CAApB,EAVkB,CAWhB;;AACCC,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCb,WAApC,EACCc,IADD,CACOC,MAAD,IAAY;AACd5B,MAAAA,KAAK,CAAC6B,SAAN,GAAkBD,MAAlB;AACA5B,MAAAA,KAAK,CAAC8B,KAAN,GAAc,IAAd;;AACA9B,MAAAA,KAAK,CAAC+B,gBAAN,GAAyB,MAAM;AAC9B/B,QAAAA,KAAK,CAACgC,IAAN;AACA,OAFD;AAGF,KAPF,EAQEC,KARF,CAQQ,UAASC,GAAT,EAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,KAVJ;AAWH;;AACD,QAAMvB,aAAN,GAAsB;AACrB,QAAG,KAAKL,KAAL,CAAWC,IAAX,IAAmB,KAAtB,EAA4B;AAC3BR,MAAAA,SAAS,CAACsC,SAAV,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,GAAxB,EAA4B,GAA5B;AACA,WAAKC,QAAL,CAAc;AAAC9B,QAAAA,UAAU,EAAE;AAAb,OAAd;AACA,YAAM,KAAK8B,QAAL,CAAc;AAAC/B,QAAAA,IAAI,EAAE;AAAP,OAAd,EAA4B,MAAM,KAAKE,SAAL,EAAlC,CAAN;AACA;AACD;;AACD,QAAMA,SAAN,GAAiB;AAChB,QAAI8B,aAAa,GAAGpB,QAAQ,CAACqB,aAAT,CAAuB,QAAvB,CAApB;AACAD,IAAAA,aAAa,CAACxB,KAAd,GAAsBjB,MAAM,CAACiB,KAA7B;AACAwB,IAAAA,aAAa,CAACvB,MAAd,GAAuBlB,MAAM,CAACkB,MAA9B;AACA,QAAIyB,MAAM,GAAGF,aAAa,CAAClB,UAAd,CAAyB,IAAzB,CAAb;AACAoB,IAAAA,MAAM,CAACnB,SAAP,CAAiBiB,aAAa,CAACxB,KAA/B,EAAsC,CAAtC;AACA0B,IAAAA,MAAM,CAAClB,KAAP,CAAa,CAAC,CAAd,EAAiB,CAAjB;AACA,QAAItB,QAAQ,GAAGkB,QAAQ,CAACqB,aAAT,CAAuB,KAAvB,CAAf;AACAC,IAAAA,MAAM,CAACC,SAAP,CAAiB1C,KAAjB,EAAuB,CAAvB,EAAyB,CAAzB,EAA2B,GAA3B,EAA+B,GAA/B;AACAC,IAAAA,QAAQ,CAAC0C,GAAT,GAAeJ,aAAa,CAACK,SAAd,EAAf;AACAL,IAAAA,aAAa,CAACM,MAAd,CAAsBC,IAAD,IAAU;AAC/B,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACCD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,IAAzB,EAF8B,CAG9B;;AACAlD,MAAAA,KAAK,CAAC;AACLsD,QAAAA,MAAM,EAAE,MADH;AAEFC,QAAAA,GAAG,EAAE,wBAFH;AAGFC,QAAAA,IAAI,EAAEL,QAHJ;AAIFM,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB;AAJP,OAAD,CAAL,CAMC1B,IAND,CAMM2B,GAAG,IAAI;AACZ,YAAIC,GAAJ,EAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB;;AACA,YAAGJ,GAAG,CAACF,IAAJ,CAASO,KAAT,IAAkB,SAArB,EAA+B;AAC9BJ,UAAAA,GAAG,GAAG,GAAN;AACAC,UAAAA,IAAI,GAAG,GAAP;AACAC,UAAAA,IAAI,GAAG,GAAP;AACAC,UAAAA,KAAK,GAAG,KAAR;AACA,SALD,MAMI;AACHH,UAAAA,GAAG,GAAGD,GAAG,CAACF,IAAJ,CAASG,GAAf;AACAC,UAAAA,IAAI,GAAGF,GAAG,CAACF,IAAJ,CAASI,IAAhB;AACAC,UAAAA,IAAI,GAAGH,GAAG,CAACF,IAAJ,CAASQ,MAAT,GAAgBL,GAAvB;;AACA,cAAGD,GAAG,CAACF,IAAJ,CAASS,WAAT,GAAuB,IAA1B,EAA+B;AAC9BH,YAAAA,KAAK,GAAG,KAAR;AACA,WAFD,MAGI;AACHA,YAAAA,KAAK,GAAG,OAAR;AACA;AACD;;AAED3D,QAAAA,SAAS,CAAC2C,SAAV,CAAoBzC,QAApB,EAA6B,CAA7B,EAA+B,CAA/B,EAAiC,GAAjC,EAAqC,GAArC;AACAF,QAAAA,SAAS,CAAC+D,IAAV;AACA/D,QAAAA,SAAS,CAACgE,SAAV;AACAhE,QAAAA,SAAS,CAACiE,IAAV,CAAeR,IAAf,EAAoBD,GAApB,EAAyBE,IAAzB,EAA+BA,IAA/B;AACA1D,QAAAA,SAAS,CAACkE,WAAV,GAAwBP,KAAxB;AACA3D,QAAAA,SAAS,CAACmE,MAAV;AACAnE,QAAAA,SAAS,CAACuB,SAAV,CAAoBxB,MAAM,CAACiB,KAA3B,EAAkC,CAAlC;AACAhB,QAAAA,SAAS,CAACwB,KAAV,CAAgB,CAAC,CAAjB,EAAoB,CAApB;AACAxB,QAAAA,SAAS,CAACoE,SAAV,GAAsB,OAAtB;AACApE,QAAAA,SAAS,CAACqE,IAAV,GAAiB,YAAjB;AACA,YAAIC,IAAI,GAAGf,GAAG,CAACF,IAAJ,CAASS,WAAT,GAAqB,GAAhC;AACAQ,QAAAA,IAAI,GAAIA,IAAI,CAACC,OAAL,CAAa,CAAb,IAAkB,GAA1B;AACA,YAAIC,IAAI,GAAGjB,GAAG,CAACF,IAAJ,CAASO,KAApB;AACA5D,QAAAA,SAAS,CAACyE,QAAV,CAAmBD,IAAnB,EAAyB,MAAId,IAAJ,GAASD,IAAlC,EAAuCD,GAAvC;AACAxD,QAAAA,SAAS,CAAC0E,OAAV;AACAtC,QAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAZ;AACA,aAAKhB,QAAL,CAAc;AAAC/B,UAAAA,IAAI,EAAE;AAAP,SAAd;AACA,aAAK+B,QAAL,CAAc;AAAC9B,UAAAA,UAAU,EAAE,oBAAoB+D,IAApB,GAA2B,IAA3B,GAAkCF;AAA/C,SAAd;AACA,OA5CD,EA6CCpC,KA7CD,CA6COC,GAAG,IAAG,CACZ;AACC,OA/CF;AAgDC,KApDF;AAqDA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDAwC,EAAAA,MAAM,GAAE;AACP,wBACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADH,CADF,eAII,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADA,CAJJ,eASE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFADD,CADD,CATF,CADD,eAgBC,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,KAA1B;AAAgC,MAAA,OAAO,EAAC,QAAxC;AAAiD,MAAA,OAAO,EAAE,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAO,MAAA,EAAE,EAAC,OAAV;AAAkB,MAAA,QAAQ,EAAE,IAA5B;AAAkC,MAAA,WAAW,EAAE,IAA/C;AAAqD,MAAA,GAAG,EAAE,KAAKpE,KAAL,CAAWN,KAArE;AAA4E,MAAA,SAAS,EAAC,OAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD,eAIC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKW,aAAtB;AAAqC,MAAA,OAAO,EAAC,WAA7C;AAAyD,MAAA,KAAK,EAAC,SAA/D;AAAyE,MAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWC,IAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,CAJD,CADF,CADD,eAWC,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,EAAE,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADD,CADD,eAME,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0B,KAAKD,KAAL,CAAWE,UAArC,CADF,CANF,CAXD,CAhBD,CADD;AA2CA;;AA9MkC;;AAiNpC,eAAeN,MAAf","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import * as blazeface from '@tensorflow-models/blazeface';\n//import '@tensorflow/tfjs-backend-webgl';\n//import * as faceapi from 'face-api.js';\nimport LoadingOverlay from 'react-loading-overlay';\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport {Jumbotron, Row, Col} from 'react-bootstrap'\nimport { Button, Grid, CardMedia, CardActionArea, Card, CardActions, Box, Container, Typography} from '@material-ui/core';\nimport './styles.css';\nimport axios from 'axios';\nlet model, canvas,canvasCtx, video, newImage;\nclass Camera extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state ={\n\t\t\tvideo: null,\n\t\t\twait: false,\n\t\t\tconfidence: \"\",\n\t\t}\n\t\t//this.faceDetect = this.faceDetect.bind(this)\n\t\t//this.drawBox = this.drawBox.bind(this)\n\t\tthis.sendPhoto = this.sendPhoto.bind(this)\n\t\tthis.disableButton = this.disableButton.bind(this)\n\t}\n\tcomponentDidMount(){\n    \tvar constraints = { audio: true, video: { width: 500, height: 500}, facingMode: { exact: \"user\" } };\n    \tvideo = document.querySelector(\"#video\");\n\t    canvas = document.querySelector(\"#canvas\");\n\t\tvideo.width = constraints[\"video\"][\"width\"];\n  \t\tvideo.height = constraints[\"video\"][\"height\"];\n  \t\tcanvas.width = constraints[\"video\"][\"width\"];\n\t    canvas.height = constraints[\"video\"][\"height\"];\n\t    canvasCtx = canvas.getContext('2d');\n\t    canvasCtx.translate(canvas.width, 0);\n\t\tcanvasCtx.scale(-1, 1);\n  \t\t//var loadModel = this.faceDetect;\n    \tnavigator.mediaDevices.getUserMedia(constraints)\n    \t.then((stream) => {\n\t        video.srcObject = stream;\n\t        video.muted = true;\n\t        video.onloadedmetadata = () => {\n\t        \tvideo.play();\n\t        };\n     \t})\n     \t.catch(function(err) {\n        \tconsole.log(err)\n        }); \n\t}\n\tasync disableButton() {\n\t\tif(this.state.wait == false){\n\t\t\tcanvasCtx.clearRect(0,0,500,500);\n\t\t\tthis.setState({confidence: \"\"});\n\t\t\tawait this.setState({wait: true}, () => this.sendPhoto())\n\t\t}\n\t}\n\tasync sendPhoto(){\n\t\tvar hidden_canvas = document.createElement('canvas');\n\t\thidden_canvas.width = canvas.width;\n\t\thidden_canvas.height = canvas.height;\n\t\tvar newCtx = hidden_canvas.getContext('2d');\n\t\tnewCtx.translate(hidden_canvas.width, 0);\n\t\tnewCtx.scale(-1, 1);\n\t\tvar newImage = document.createElement('img');\n\t\tnewCtx.drawImage(video,0,0,500,500)\n\t\tnewImage.src = hidden_canvas.toDataURL()\n\t\thidden_canvas.toBlob((blob) => {\n\t\tconst formData = new FormData();\n\t\t\tformData.append(\"image\", blob);\n\t\t\t//console.log(blob)\n\t\t\taxios({\n\t\t\t\tmethod: 'post',\n    \t\t\turl: 'http://127.0.0.1:8000/',\n    \t\t\tdata: formData,\n    \t\t\theaders: {'Content-Type': 'multipart/form-data' }\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\tlet top, left, size, color;\n\t\t\t\tif(res.data.label == \"no face\"){\n\t\t\t\t\ttop = 100;\n\t\t\t\t\tleft = 100;\n\t\t\t\t\tsize = 200;\n\t\t\t\t\tcolor = 'red';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttop = res.data.top;\n\t\t\t\t\tleft = res.data.left;\n\t\t\t\t\tsize = res.data.bottom-top;\n\t\t\t\t\tif(res.data.probability < 0.65){\n\t\t\t\t\t\tcolor = 'red';\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tcolor = 'green';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcanvasCtx.drawImage(newImage,0,0,500,500)\n\t\t\t\tcanvasCtx.save();\n\t\t\t\tcanvasCtx.beginPath();\n\t\t\t\tcanvasCtx.rect(left,top, size, size)\n\t\t\t\tcanvasCtx.strokeStyle = color\n\t\t\t\tcanvasCtx.stroke(); \n\t\t\t\tcanvasCtx.translate(canvas.width, 0);\n\t\t\t\tcanvasCtx.scale(-1, 1);\n\t\t\t\tcanvasCtx.fillStyle = \"white\";\n\t\t\t\tcanvasCtx.font = \"20pt Arial\";\n\t\t\t\tvar prob = res.data.probability*100\n\t\t\t\tprob =  prob.toFixed(2) + \"%\"\n\t\t\t\tvar text = res.data.label;\n\t\t\t\tcanvasCtx.fillText(text, 500-size-left,top)\n\t\t\t\tcanvasCtx.restore();\n\t\t\t\tconsole.log(res)\n\t\t\t\tthis.setState({wait: false})\n\t\t\t\tthis.setState({confidence: \"Probability of \" + text + \": \" + prob})\n\t\t\t})\n\t\t\t.catch(err =>{\n\t\t\t\t//console.log(err)\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\t/*async faceDetect() {\n\t\tconst returnTensors = false;\n\t\tconst predictions = await model.estimateFaces(video, returnTensors);\n\t\t//const regionsToExtract = [ new faceapi.Rect(0, 0, 100, 100)]\n\t\t//const predictions = await faceapi.detectAllFaces(video, new faceapi.faceRecognitionNetOptions())\n\t\t//const descriptor = await faceapi.computeFaceDescriptor()\n\t\t//console.log(descriptor)\n    \tawait this.drawBox(predictions)\n    \trequestAnimationFrame(this.faceDetect)\n\t}\n\n\tasync drawBox(predictions) {\n\t\tif(predictions.length > 0) {\n\t\t\tcanvasCtx.drawImage(video, 0,0)\n\t\t\tfor (let i = 0; i < predictions.length; i++) {\n\t\t\t\tconst start = predictions[i].topLeft;\n\t\t\t\tconst end = predictions[i].bottomRight;\n\t\t\t\tconst size = [end[0] - start[0], end[1] - start[1]];\n\t\t\t\t// Render a bounding box over faces\n\t\t\t\tcanvasCtx.beginPath();\n\t\t\t\tcanvasCtx.rect(start[0], start[1], size[0], size[1]);\n\t\t\t\tcanvasCtx.strokeStyle = 'black';\n\t\t\t\tcanvasCtx.stroke(); \n\t\t\t\tvar hidden_canvas = document.createElement('canvas');\n\t\t\t\thidden_canvas.width = 720\n\t\t\t\thidden_canvas.height = 500\n\t\t\t\tvar newCtx = hidden_canvas.getContext('2d');\n\t\t\t\t//newCtx.drawImage(canvas, canvas.width - size[0]-start[0], start[1], size[0], size[1], 0, 0, size[0],size[1])\n\t\t\t\tnewCtx.drawImage(video,0,0,720,500)\n\t\t\t\tnewImage.src = hidden_canvas.toDataURL()\n\t\t\t\tawait hidden_canvas.toBlob((blob) => {\n\t\t\t\t\tconst formData = new FormData();\n\t\t\t\t\tformData.append(\"image\", blob);\n\t\t\t\t\t//console.log(blob)\n\t\t\t\t\taxios({\n\n\t\t\t\t\t\tmethod: 'post',\n    \t\t\t\t\turl: 'http://127.0.0.1:8000/',\n    \t\t\t\t\tdata: formData,\n    \t\t\t\t\theaders: {'Content-Type': 'multipart/form-data' }\n\t\t\t\t\t})\n\t\t\t\t\t.then(res => {\n\t\t\t\t\t\tconsole.log(res)\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err =>{\n\t\t\t\t\t\t//console.log(err)\n\t\t\t\t\t})\n\t\t\t\t})\n\t    \t}\n\t    }\n\t}*/\n\n\n\trender(){\n\t\treturn(\n\t\t\t<Container>\n\t\t\t\t<Jumbotron>\n\t\t\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t  \t\t<h1 className=\"title\">smileAI</h1>\n\t\t\t\t\t  \t</Row>\n\t\t\t\t\t  \t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t\t  <p>\n\t\t\t\t\t\t    Simple AI that detects smiles.\n\t\t\t\t\t\t  </p>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<small>Convolutional neural network built only numpy (no deep learning libaries).</small>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Jumbotron>\n\t\t\t\t<Grid container direction=\"row\" justify=\"center\" spacing={5}>\n\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t<CardActionArea>\n\t\t\t\t\t\t\t\t\t<video id=\"video\" autoPlay={true} playsInline={true} src={this.state.video} className=\"video\"></video>\n\t\t\t\t\t\t\t\t</CardActionArea>\n\t\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t<Button onClick={this.disableButton} variant=\"contained\" color=\"primary\" disabled={this.state.wait}>Take Picture</Button>\n\t\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t<CardActionArea>\n\t\t\t\t\t\t\t\t\t<canvas id=\"canvas\"></canvas>\n\t\t\t\t\t\t\t</CardActionArea>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t<Typography variant=\"h4\">{this.state.confidence}</Typography>\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t</Grid>\n\t\t\t</Container>\n\n\t\t)\n\t}\n}\n\nexport default Camera;"]},"metadata":{},"sourceType":"module"}