{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Desktop/smileai/src/Camera.js\";\nimport React from 'react';\nimport { Container, Row, Col, Jumbotron } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport '@tensorflow/tfjs-backend-webgl';\nimport * as faceapi from 'face-api.js';\nimport './styles.css';\nimport axios from 'axios';\nlet model, canvas, canvasCtx, video, newImage;\n\nclass Camera extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      video: null\n    };\n    this.faceDetect = this.faceDetect.bind(this);\n    this.drawBox = this.drawBox.bind(this);\n  }\n\n  async componentDidMount() {\n    await faceapi.nets.faceRecognitionNet.loadFromUri('/models');\n    console.log(faceapi.nets); //model = await blazeface.load();\n\n    var constraints = {\n      audio: true,\n      video: {\n        width: 720,\n        height: 500\n      },\n      facingMode: {\n        exact: \"user\"\n      }\n    };\n    video = document.querySelector(\"#video\");\n    canvas = document.querySelector(\"#videoCanvas\");\n    video.width = constraints[\"video\"][\"width\"];\n    video.height = constraints[\"video\"][\"height\"];\n    canvas.width = constraints[\"video\"][\"width\"];\n    canvas.height = constraints[\"video\"][\"height\"];\n    canvasCtx = canvas.getContext('2d');\n    canvasCtx.translate(canvas.width, 0);\n    canvasCtx.scale(-1, 1);\n    var loadModel = this.faceDetect;\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      //var video = document.querySelector(\"#video\");\n      video.srcObject = stream;\n\n      video.onloadedmetadata = () => {\n        video.play();\n      };\n\n      video.onplay = () => loadModel();\n    }).catch(function (err) {\n      console.log(err);\n    });\n    newImage = document.createElement('img');\n    document.body.append(newImage);\n  }\n\n  async faceDetect() {\n    const returnTensors = false; //const predictions = await model.estimateFaces(video, returnTensors);\n\n    const regionsToExtract = [new faceapi.Rect(0, 0, 100, 100)]; //const predictions = await faceapi.detectAllFaces(video, new faceapi.faceRecognitionNetOptions())\n\n    const canvases = await faceapi.extractFaces(video);\n    console.log(canvases); //this.drawBox(predictions)\n\n    requestAnimationFrame(this.faceDetect);\n  }\n\n  drawBox(predictions) {\n    if (predictions.length > 0) {\n      canvasCtx.drawImage(video, 0, 0);\n\n      for (let i = 0; i < predictions.length; i++) {\n        const start = predictions[i].topLeft;\n        const end = predictions[i].bottomRight;\n        const size = [end[0] - start[0], end[1] - start[1]]; // Render a bounding box over faces\n\n        canvasCtx.beginPath();\n        canvasCtx.rect(start[0], start[1], size[0], size[1]);\n        canvasCtx.strokeStyle = 'black';\n        canvasCtx.stroke();\n        var hidden_canvas = document.createElement('canvas');\n        hidden_canvas.width = size[0];\n        hidden_canvas.height = size[1];\n        var newCtx = hidden_canvas.getContext('2d');\n        newCtx.drawImage(canvas, canvas.width - size[0] - start[0], start[1], size[0], size[1], 0, 0, size[0], size[1]);\n        hidden_canvas.toBlob(blob => {\n          const formData = new FormData();\n          formData.append(\"image\", blob); //console.log(blob)\n\n          axios({\n            method: 'post',\n            url: 'http://127.0.0.1:8000/',\n            data: formData,\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }).then(res => {//console.log(res)\n          }).catch(err => {//console.log(err)\n          });\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 10\n      }\n    }, \"smileAI\")), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, \"Simple AI that detects smiles. Positive vibes only.\")), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, \"Neural network built without any deep learning libraries (only numpy).\")))), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"videoCanvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"video\", {\n      id: \"video\",\n      autoPlay: true,\n      playsInline: true,\n      src: this.state.video,\n      className: \"video\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 10\n      }\n    }))));\n  }\n\n}\n\nexport default Camera;","map":{"version":3,"sources":["/Users/ethan/Desktop/smileai/src/Camera.js"],"names":["React","Container","Row","Col","Jumbotron","blazeface","faceapi","axios","model","canvas","canvasCtx","video","newImage","Camera","Component","constructor","props","state","faceDetect","bind","drawBox","componentDidMount","nets","faceRecognitionNet","loadFromUri","console","log","constraints","audio","width","height","facingMode","exact","document","querySelector","getContext","translate","scale","loadModel","navigator","mediaDevices","getUserMedia","then","stream","srcObject","onloadedmetadata","play","onplay","catch","err","createElement","body","append","returnTensors","regionsToExtract","Rect","canvases","extractFaces","requestAnimationFrame","predictions","length","drawImage","i","start","topLeft","end","bottomRight","size","beginPath","rect","strokeStyle","stroke","hidden_canvas","newCtx","toBlob","blob","formData","FormData","method","url","data","headers","res","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,GAAnB,EAAwBC,GAAxB,EAA6BC,SAA7B,QAA6C,iBAA7C;AACA,OAAO,sCAAP;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;AACA,OAAO,gCAAP;AACA,OAAO,KAAKC,OAAZ,MAAyB,aAAzB;AACA,OAAO,cAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAIC,KAAJ,EAAWC,MAAX,EAAkBC,SAAlB,EAA6BC,KAA7B,EAAoCC,QAApC;;AACA,MAAMC,MAAN,SAAqBb,KAAK,CAACc,SAA3B,CAAoC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAY;AACXN,MAAAA,KAAK,EAAE;AADI,KAAZ;AAGA,SAAKO,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaD,IAAb,CAAkB,IAAlB,CAAf;AACA;;AACD,QAAME,iBAAN,GAAyB;AACxB,UAAMf,OAAO,CAACgB,IAAR,CAAaC,kBAAb,CAAgCC,WAAhC,CAA4C,SAA5C,CAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYpB,OAAO,CAACgB,IAApB,EAFwB,CAGxB;;AACG,QAAIK,WAAW,GAAG;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAejB,MAAAA,KAAK,EAAE;AAAEkB,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,MAAM,EAAE;AAAtB,OAAtB;AAAkDC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAA9D,KAAlB;AACArB,IAAAA,KAAK,GAAGsB,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAR;AACAzB,IAAAA,MAAM,GAAGwB,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAAT;AACHvB,IAAAA,KAAK,CAACkB,KAAN,GAAcF,WAAW,CAAC,OAAD,CAAX,CAAqB,OAArB,CAAd;AACEhB,IAAAA,KAAK,CAACmB,MAAN,GAAeH,WAAW,CAAC,OAAD,CAAX,CAAqB,QAArB,CAAf;AACAlB,IAAAA,MAAM,CAACoB,KAAP,GAAeF,WAAW,CAAC,OAAD,CAAX,CAAqB,OAArB,CAAf;AACClB,IAAAA,MAAM,CAACqB,MAAP,GAAgBH,WAAW,CAAC,OAAD,CAAX,CAAqB,QAArB,CAAhB;AACAjB,IAAAA,SAAS,GAAGD,MAAM,CAAC0B,UAAP,CAAkB,IAAlB,CAAZ;AACAzB,IAAAA,SAAS,CAAC0B,SAAV,CAAoB3B,MAAM,CAACoB,KAA3B,EAAkC,CAAlC;AACHnB,IAAAA,SAAS,CAAC2B,KAAV,CAAgB,CAAC,CAAjB,EAAoB,CAApB;AACE,QAAIC,SAAS,GAAG,KAAKpB,UAArB;AACCqB,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCd,WAApC,EACCe,IADD,CACOC,MAAD,IAAY;AACd;AACAhC,MAAAA,KAAK,CAACiC,SAAN,GAAkBD,MAAlB;;AACAhC,MAAAA,KAAK,CAACkC,gBAAN,GAAyB,MAAM;AAC9BlC,QAAAA,KAAK,CAACmC,IAAN;AACA,OAFD;;AAGAnC,MAAAA,KAAK,CAACoC,MAAN,GAAe,MAAMT,SAAS,EAA9B;AACF,KARF,EASEU,KATF,CASQ,UAASC,GAAT,EAAc;AAClBxB,MAAAA,OAAO,CAACC,GAAR,CAAYuB,GAAZ;AACA,KAXJ;AAYGrC,IAAAA,QAAQ,GAAGqB,QAAQ,CAACiB,aAAT,CAAuB,KAAvB,CAAX;AACAjB,IAAAA,QAAQ,CAACkB,IAAT,CAAcC,MAAd,CAAqBxC,QAArB;AAEN;;AAED,QAAMM,UAAN,GAAmB;AAClB,UAAMmC,aAAa,GAAG,KAAtB,CADkB,CAElB;;AACA,UAAMC,gBAAgB,GAAG,CAAE,IAAIhD,OAAO,CAACiD,IAAZ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,EAA4B,GAA5B,CAAF,CAAzB,CAHkB,CAIlB;;AACA,UAAMC,QAAQ,GAAG,MAAMlD,OAAO,CAACmD,YAAR,CAAqB9C,KAArB,CAAvB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAY8B,QAAZ,EANkB,CAOf;;AACAE,IAAAA,qBAAqB,CAAC,KAAKxC,UAAN,CAArB;AACH;;AAEDE,EAAAA,OAAO,CAACuC,WAAD,EAAc;AACpB,QAAGA,WAAW,CAACC,MAAZ,GAAqB,CAAxB,EAA2B;AAC1BlD,MAAAA,SAAS,CAACmD,SAAV,CAAoBlD,KAApB,EAA2B,CAA3B,EAA6B,CAA7B;;AACA,WAAK,IAAImD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACC,MAAhC,EAAwCE,CAAC,EAAzC,EAA6C;AAC5C,cAAMC,KAAK,GAAGJ,WAAW,CAACG,CAAD,CAAX,CAAeE,OAA7B;AACA,cAAMC,GAAG,GAAGN,WAAW,CAACG,CAAD,CAAX,CAAeI,WAA3B;AACA,cAAMC,IAAI,GAAG,CAACF,GAAG,CAAC,CAAD,CAAH,GAASF,KAAK,CAAC,CAAD,CAAf,EAAoBE,GAAG,CAAC,CAAD,CAAH,GAASF,KAAK,CAAC,CAAD,CAAlC,CAAb,CAH4C,CAI5C;;AACArD,QAAAA,SAAS,CAAC0D,SAAV;AACA1D,QAAAA,SAAS,CAAC2D,IAAV,CAAeN,KAAK,CAAC,CAAD,CAApB,EAAyBA,KAAK,CAAC,CAAD,CAA9B,EAAmCI,IAAI,CAAC,CAAD,CAAvC,EAA4CA,IAAI,CAAC,CAAD,CAAhD;AACAzD,QAAAA,SAAS,CAAC4D,WAAV,GAAwB,OAAxB;AACA5D,QAAAA,SAAS,CAAC6D,MAAV;AACA,YAAIC,aAAa,GAAGvC,QAAQ,CAACiB,aAAT,CAAuB,QAAvB,CAApB;AACAsB,QAAAA,aAAa,CAAC3C,KAAd,GAAsBsC,IAAI,CAAC,CAAD,CAA1B;AACAK,QAAAA,aAAa,CAAC1C,MAAd,GAAuBqC,IAAI,CAAC,CAAD,CAA3B;AACA,YAAIM,MAAM,GAAGD,aAAa,CAACrC,UAAd,CAAyB,IAAzB,CAAb;AACAsC,QAAAA,MAAM,CAACZ,SAAP,CAAiBpD,MAAjB,EAAyBA,MAAM,CAACoB,KAAP,GAAesC,IAAI,CAAC,CAAD,CAAnB,GAAuBJ,KAAK,CAAC,CAAD,CAArD,EAA0DA,KAAK,CAAC,CAAD,CAA/D,EAAoEI,IAAI,CAAC,CAAD,CAAxE,EAA6EA,IAAI,CAAC,CAAD,CAAjF,EAAsF,CAAtF,EAAyF,CAAzF,EAA4FA,IAAI,CAAC,CAAD,CAAhG,EAAoGA,IAAI,CAAC,CAAD,CAAxG;AACAK,QAAAA,aAAa,CAACE,MAAd,CAAsBC,IAAD,IAAU;AAC9B,gBAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,UAAAA,QAAQ,CAACxB,MAAT,CAAgB,OAAhB,EAAyBuB,IAAzB,EAF8B,CAG9B;;AACApE,UAAAA,KAAK,CAAC;AAELuE,YAAAA,MAAM,EAAE,MAFH;AAGFC,YAAAA,GAAG,EAAE,wBAHH;AAIFC,YAAAA,IAAI,EAAEJ,QAJJ;AAKFK,YAAAA,OAAO,EAAE;AAAC,8BAAgB;AAAjB;AALP,WAAD,CAAL,CAOCvC,IAPD,CAOMwC,GAAG,IAAI,CACZ;AACA,WATD,EAUClC,KAVD,CAUOC,GAAG,IAAG,CACZ;AACA,WAZD;AAaA,SAjBD;AAkBG;AACD;AACJ;;AAGDkC,EAAAA,MAAM,GAAE;AACP,wBACC,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADH,CADD,eAIG,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADA,CAJH,eASC,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFADD,CADD,CATD,CADF,eAgBC,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAQ,MAAA,EAAE,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,eAEC;AAAO,MAAA,EAAE,EAAC,OAAV;AAAkB,MAAA,QAAQ,EAAE,IAA5B;AAAkC,MAAA,WAAW,EAAE,IAA/C;AAAqD,MAAA,GAAG,EAAE,KAAKlE,KAAL,CAAWN,KAArE;AAA4E,MAAA,SAAS,EAAC,OAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CADJ,CAhBD,CADD;AA0BA;;AAvHkC;;AA0HpC,eAAeE,MAAf","sourcesContent":["import React from 'react';\nimport {Container, Row, Col, Jumbotron} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport '@tensorflow/tfjs-backend-webgl';\nimport * as faceapi from 'face-api.js';\nimport './styles.css';\nimport axios from 'axios';\nlet model, canvas,canvasCtx, video, newImage;\nclass Camera extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state ={\n\t\t\tvideo: null,\n\t\t}\n\t\tthis.faceDetect = this.faceDetect.bind(this)\n\t\tthis.drawBox = this.drawBox.bind(this)\n\t}\n\tasync componentDidMount(){\n\t\tawait faceapi.nets.faceRecognitionNet.loadFromUri('/models');\n\t\tconsole.log(faceapi.nets)\n\t\t//model = await blazeface.load();\n    \tvar constraints = { audio: true, video: { width: 720, height: 500}, facingMode: { exact: \"user\" } };\n    \tvideo = document.querySelector(\"#video\");\n\t    canvas = document.querySelector(\"#videoCanvas\");\n\t\tvideo.width = constraints[\"video\"][\"width\"];\n  \t\tvideo.height = constraints[\"video\"][\"height\"];\n  \t\tcanvas.width = constraints[\"video\"][\"width\"];\n\t    canvas.height = constraints[\"video\"][\"height\"];\n\t    canvasCtx = canvas.getContext('2d');\n\t    canvasCtx.translate(canvas.width, 0);\n\t\tcanvasCtx.scale(-1, 1);\n  \t\tvar loadModel = this.faceDetect;\n    \tnavigator.mediaDevices.getUserMedia(constraints)\n    \t.then((stream) => {\n\t        //var video = document.querySelector(\"#video\");\n\t        video.srcObject = stream;\n\t        video.onloadedmetadata = () => {\n\t        \tvideo.play();\n\t        };\n\t        video.onplay = () => loadModel()\n     \t})\n     \t.catch(function(err) {\n        \tconsole.log(err)\n        }); \n        newImage = document.createElement('img');\n        document.body.append(newImage);\n\n\t}\n\n\tasync faceDetect() {\n\t\tconst returnTensors = false;\n\t\t//const predictions = await model.estimateFaces(video, returnTensors);\n\t\tconst regionsToExtract = [ new faceapi.Rect(0, 0, 100, 100)]\n\t\t//const predictions = await faceapi.detectAllFaces(video, new faceapi.faceRecognitionNetOptions())\n\t\tconst canvases = await faceapi.extractFaces(video)\n\t\tconsole.log(canvases)\n    \t//this.drawBox(predictions)\n    \trequestAnimationFrame(this.faceDetect)\n\t}\n\n\tdrawBox(predictions) {\n\t\tif(predictions.length > 0) {\n\t\t\tcanvasCtx.drawImage(video, 0,0)\n\t\t\tfor (let i = 0; i < predictions.length; i++) {\n\t\t\t\tconst start = predictions[i].topLeft;\n\t\t\t\tconst end = predictions[i].bottomRight;\n\t\t\t\tconst size = [end[0] - start[0], end[1] - start[1]];\n\t\t\t\t// Render a bounding box over faces\n\t\t\t\tcanvasCtx.beginPath();\n\t\t\t\tcanvasCtx.rect(start[0], start[1], size[0], size[1]);\n\t\t\t\tcanvasCtx.strokeStyle = 'black';\n\t\t\t\tcanvasCtx.stroke(); \n\t\t\t\tvar hidden_canvas = document.createElement('canvas');\n\t\t\t\thidden_canvas.width = size[0]\n\t\t\t\thidden_canvas.height = size[1]\n\t\t\t\tvar newCtx = hidden_canvas.getContext('2d');\n\t\t\t\tnewCtx.drawImage(canvas, canvas.width - size[0]-start[0], start[1], size[0], size[1], 0, 0, size[0],size[1])\n\t\t\t\thidden_canvas.toBlob((blob) => {\n\t\t\t\t\tconst formData = new FormData();\n\t\t\t\t\tformData.append(\"image\", blob);\n\t\t\t\t\t//console.log(blob)\n\t\t\t\t\taxios({\n\n\t\t\t\t\t\tmethod: 'post',\n    \t\t\t\t\turl: 'http://127.0.0.1:8000/',\n    \t\t\t\t\tdata: formData,\n    \t\t\t\t\theaders: {'Content-Type': 'multipart/form-data' }\n\t\t\t\t\t})\n\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t//console.log(res)\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err =>{\n\t\t\t\t\t\t//console.log(err)\n\t\t\t\t\t})\n\t\t\t\t})\n\t    \t}\n\t    }\n\t}\n\n\n\trender(){\n\t\treturn(\n\t\t\t<Container fluid>\n\t\t\t\t\t<Jumbotron>\n\t\t\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t  \t\t<h1 className=\"title\">smileAI</h1>\n\t\t\t\t\t  \t</Row>\n\t\t\t\t\t  \t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t\t  <p>\n\t\t\t\t\t\t    Simple AI that detects smiles. Positive vibes only.\n\t\t\t\t\t\t  </p>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<small>Neural network built without any deep learning libraries (only numpy).</small>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Jumbotron>\n\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t    <Col xs={6}>\n\t\t\t\t    \t<canvas id=\"videoCanvas\"></canvas>\n\t\t\t\t    \t<video id=\"video\" autoPlay={true} playsInline={true} src={this.state.video} className=\"video\"></video>\n\t\t\t\t    </Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\n\t\t)\n\t}\n}\n\nexport default Camera;"]},"metadata":{},"sourceType":"module"}