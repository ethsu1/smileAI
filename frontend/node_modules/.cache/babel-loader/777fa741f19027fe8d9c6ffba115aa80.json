{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Desktop/smileai/src/Camera.js\";\nimport React from 'react';\nimport { Container, Row, Col, Jumbotron } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport '@tensorflow/tfjs-backend-webgl';\nimport './styles.css';\nlet model;\n\nclass Camera extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      video: null\n    };\n    this.faceDetect = this.faceDetect.bind(this);\n    this.drawBox = this.drawBox.bind(this);\n  }\n\n  async componentDidMount() {\n    model = await blazeface.load();\n    var constraints = {\n      audio: true,\n      video: {\n        width: 720,\n        height: 500\n      },\n      facingMode: {\n        exact: \"user\"\n      }\n    };\n    var loadModel = this.faceDetect;\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      var video = document.querySelector(\"video\");\n      video.srcObject = stream;\n\n      video.onloadedmetadata = () => {\n        video.play();\n      };\n\n      video.onplay = () => loadModel();\n    }).catch(function (err) {\n      console.log(\"no video\");\n      console.log(err);\n    });\n  }\n\n  async faceDetect() {\n    const returnTensors = false;\n    const video = document.querySelector(\"video\");\n    const flipHorizontal = true;\n    const annotateBoxes = true;\n    const predictions = await model.estimateFaces(video, returnTensors, flipHorizontal, annotateBoxes);\n    console.log(predictions);\n    this.drawBox(predictions);\n    requestAnimationFrame(this.faceDetect);\n  }\n\n  drawBox(predictions) {\n    if (predictions.length > 0) {\n      var video = document.querySelector(\"#video\");\n      var canvas = document.querySelector(\"#videoCanvas\");\n      var ctx = canvas.getContext('2d');\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      for (let i = 0; i < predictions.length; i++) {\n        const start = predictions[i].topLeft;\n        const end = predictions[i].bottomRight;\n        const size = [end[0] - start[0], end[1] - start[1]]; // Render a rectangle over each detected face.\n\n        ctx.fillRect(start[0], start[1], size[0], size[1]);\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 10\n      }\n    }, \"smileAI\")), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, \"Simple AI that detects smiles. Positive vibes only.\")), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \"Neural network built without any deep learning libraries (only numpy).\")))), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"videoCanvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"video\", {\n      id: \"video\",\n      autoPlay: true,\n      playsInline: true,\n      src: this.state.video,\n      className: \"video\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 10\n      }\n    }))));\n  }\n\n}\n\nexport default Camera;","map":{"version":3,"sources":["/Users/ethan/Desktop/smileai/src/Camera.js"],"names":["React","Container","Row","Col","Jumbotron","blazeface","model","Camera","Component","constructor","props","state","video","faceDetect","bind","drawBox","componentDidMount","load","constraints","audio","width","height","facingMode","exact","loadModel","navigator","mediaDevices","getUserMedia","then","stream","document","querySelector","srcObject","onloadedmetadata","play","onplay","catch","err","console","log","returnTensors","flipHorizontal","annotateBoxes","predictions","estimateFaces","requestAnimationFrame","length","canvas","ctx","getContext","videoWidth","videoHeight","drawImage","i","start","topLeft","end","bottomRight","size","fillRect","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Container, Row, Col, Jumbotron} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport '@tensorflow/tfjs-backend-webgl';\nimport './styles.css';\nlet model;\nclass Camera extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state ={\n\t\t\tvideo: null,\n\t\t}\n\t\tthis.faceDetect = this.faceDetect.bind(this)\n\t\tthis.drawBox = this.drawBox.bind(this)\n\t}\n\tasync componentDidMount(){\n\t\tmodel = await blazeface.load();\n    \tvar constraints = { audio: true, video: { width: 720, height: 500}, facingMode: { exact: \"user\" } };\n    \tvar loadModel = this.faceDetect;\n    \tnavigator.mediaDevices.getUserMedia(constraints)\n    \t.then((stream) => {\n\t        var video = document.querySelector(\"video\");\n\t        video.srcObject = stream;\n\t        video.onloadedmetadata = () => {\n\t        \tvideo.play();\n\t        };\n\t        video.onplay = () => loadModel()\n     \t})\n     \t.catch(function(err) {\n        \tconsole.log(\"no video\")\n        \tconsole.log(err)\n        }); \n\t}\n\n\tasync faceDetect() {\n\t\tconst returnTensors = false;\n     \tconst video = document.querySelector(\"video\");\n     \tconst flipHorizontal = true;\n  \t\tconst annotateBoxes = true;\n\t\tconst predictions = await model.estimateFaces(video, returnTensors,flipHorizontal, annotateBoxes);\n\t\tconsole.log(predictions)\n    \tthis.drawBox(predictions)\n    \trequestAnimationFrame(this.faceDetect)\n\t}\n\n\tdrawBox(predictions) {\n\t\tif(predictions.length > 0) {\n\t\t\tvar video = document.querySelector(\"#video\");\n\t    \tvar canvas = document.querySelector(\"#videoCanvas\");\n\t\t\tvar ctx = canvas.getContext('2d');\n\n\t    \tcanvas.width = video.videoWidth;\n\t    \tcanvas.height = video.videoHeight;\n\t    \tctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\t    \tfor (let i = 0; i < predictions.length; i++) {\n\t\t      const start = predictions[i].topLeft;\n\t\t      const end = predictions[i].bottomRight;\n\t\t      const size = [end[0] - start[0], end[1] - start[1]];\n\t\t      // Render a rectangle over each detected face.\n\t\t      ctx.fillRect(start[0], start[1], size[0], size[1]);\n\t    \t}\n\t    }\n\t}\n\n\n\trender(){\n\t\treturn(\n\t\t\t<Container fluid>\n\t\t\t\t\t<Jumbotron>\n\t\t\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t  \t\t<h1 className=\"title\">smileAI</h1>\n\t\t\t\t\t  \t</Row>\n\t\t\t\t\t  \t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t\t  <p>\n\t\t\t\t\t\t    Simple AI that detects smiles. Positive vibes only.\n\t\t\t\t\t\t  </p>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<small>Neural network built without any deep learning libraries (only numpy).</small>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Jumbotron>\n\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t    <Col xs={6}>\n\t\t\t\t    \t<canvas id=\"videoCanvas\"></canvas>\n\t\t\t\t    \t<video id=\"video\" autoPlay={true} playsInline={true} src={this.state.video} className=\"video\"></video>\n\t\t\t\t    </Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\n\t\t)\n\t}\n}\n\nexport default Camera;"]},"metadata":{},"sourceType":"module"}