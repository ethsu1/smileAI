{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Desktop/smileai/src/Camera.js\";\nimport React from 'react';\nimport { Container, Row, Col, Jumbotron } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport '@tensorflow/tfjs-backend-webgl';\nimport './styles.css';\nlet model, canvas, canvasCtx, video;\n\nclass Camera extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      video: null\n    };\n    this.faceDetect = this.faceDetect.bind(this);\n    this.drawBox = this.drawBox.bind(this);\n  }\n\n  async componentDidMount() {\n    model = await blazeface.load();\n    var constraints = {\n      audio: true,\n      video: {\n        width: 720,\n        height: 500\n      },\n      facingMode: {\n        exact: \"user\"\n      }\n    };\n    video = document.querySelector(\"#video\");\n    canvas = document.querySelector(\"#videoCanvas\");\n    video.width = constraints[\"video\"][\"width\"];\n    video.height = constraints[\"video\"][\"height\"];\n    canvas.width = constraints[\"video\"][\"width\"];\n    canvas.height = constraints[\"video\"][\"height\"];\n    canvasCtx = canvas.getContext('2d');\n    canvasCtx.translate(canvas.width, 0);\n    canvasCtx.scale(-1, 1);\n    var loadModel = this.faceDetect;\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      //var video = document.querySelector(\"#video\");\n      video.srcObject = stream;\n\n      video.onloadedmetadata = () => {\n        video.play();\n      };\n\n      video.onplay = () => loadModel();\n    }).catch(function (err) {\n      console.log(\"no video\");\n      console.log(err);\n    });\n  }\n\n  async faceDetect() {\n    const returnTensors = false;\n    const predictions = await model.estimateFaces(video, returnTensors);\n    this.drawBox(predictions);\n    requestAnimationFrame(this.faceDetect);\n  }\n\n  drawBox(predictions) {\n    if (predictions.length > 0) {\n      canvasCtx.drawImage(video, 0, 0); //canvasCtx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      for (let i = 0; i < predictions.length; i++) {\n        const start = predictions[i].topLeft;\n        const end = predictions[i].bottomRight;\n        const size = [end[0] - start[0], end[1] - start[1]]; // Render a bounding box over faces\n\n        canvasCtx.beginPath();\n        canvasCtx.rect(start[0], start[1], size[0], size[1]);\n        console.log(predictions);\n        console.log(\"trash\");\n        canvasCtx.strokeStyle = 'black';\n        canvasCtx.stroke();\n        var hidden_canvas = document.createElement('canvas');\n        hidden_canvas.width = size[0];\n        hidden_canvas.height = size[1];\n        var newContent = hidden_canvas.getContext('2d');\n        newContent.translate(hidden_canvas.width, 0);\n        newContent.scale(-1, 1);\n        newContent.drawImage(canvas, start[0], start[1], start[0] + size[0], start[1] + size[1], 0, 0, size[0], size[1]);\n        var link = document.createElement(\"a\");\n        link.href = hidden_canvas.toDataURL('image/png'); //function blocks CORS\n\n        link.download = 'screenshot.jpg';\n        link.click();\n        break;\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 10\n      }\n    }, \"smileAI\")), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, \"Simple AI that detects smiles. Positive vibes only.\")), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, \"Neural network built without any deep learning libraries (only numpy).\")))), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"videoCanvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"video\", {\n      id: \"video\",\n      autoPlay: true,\n      playsInline: true,\n      src: this.state.video,\n      className: \"video\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 10\n      }\n    }))));\n  }\n\n}\n\nexport default Camera;","map":{"version":3,"sources":["/Users/ethan/Desktop/smileai/src/Camera.js"],"names":["React","Container","Row","Col","Jumbotron","blazeface","model","canvas","canvasCtx","video","Camera","Component","constructor","props","state","faceDetect","bind","drawBox","componentDidMount","load","constraints","audio","width","height","facingMode","exact","document","querySelector","getContext","translate","scale","loadModel","navigator","mediaDevices","getUserMedia","then","stream","srcObject","onloadedmetadata","play","onplay","catch","err","console","log","returnTensors","predictions","estimateFaces","requestAnimationFrame","length","drawImage","i","start","topLeft","end","bottomRight","size","beginPath","rect","strokeStyle","stroke","hidden_canvas","createElement","newContent","link","href","toDataURL","download","click","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Container, Row, Col, Jumbotron} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport '@tensorflow/tfjs-backend-webgl';\nimport './styles.css';\nlet model, canvas,canvasCtx, video;\nclass Camera extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state ={\n\t\t\tvideo: null,\n\t\t}\n\t\tthis.faceDetect = this.faceDetect.bind(this)\n\t\tthis.drawBox = this.drawBox.bind(this)\n\t}\n\tasync componentDidMount(){\n\t\tmodel = await blazeface.load();\n    \tvar constraints = { audio: true, video: { width: 720, height: 500}, facingMode: { exact: \"user\" } };\n    \tvideo = document.querySelector(\"#video\");\n\t    canvas = document.querySelector(\"#videoCanvas\");\n\t\tvideo.width = constraints[\"video\"][\"width\"];\n  \t\tvideo.height = constraints[\"video\"][\"height\"];\n  \t\tcanvas.width = constraints[\"video\"][\"width\"];\n\t    canvas.height = constraints[\"video\"][\"height\"];\n\t    canvasCtx = canvas.getContext('2d');\n\t    canvasCtx.translate(canvas.width, 0);\n\t\tcanvasCtx.scale(-1, 1);\n  \t\tvar loadModel = this.faceDetect;\n    \tnavigator.mediaDevices.getUserMedia(constraints)\n    \t.then((stream) => {\n\t        //var video = document.querySelector(\"#video\");\n\t        video.srcObject = stream;\n\t        video.onloadedmetadata = () => {\n\t        \tvideo.play();\n\t        };\n\t        video.onplay = () => loadModel()\n     \t})\n     \t.catch(function(err) {\n        \tconsole.log(\"no video\")\n        \tconsole.log(err)\n        }); \n\t}\n\n\tasync faceDetect() {\n\t\tconst returnTensors = false;\n\t\tconst predictions = await model.estimateFaces(video, returnTensors);\n    \tthis.drawBox(predictions)\n    \trequestAnimationFrame(this.faceDetect)\n\t}\n\n\tdrawBox(predictions) {\n\t\tif(predictions.length > 0) {\n\t\t\tcanvasCtx.drawImage(video, 0,0)\n\t\t\t//canvasCtx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\t\t\tfor (let i = 0; i < predictions.length; i++) {\n\t\t\t\tconst start = predictions[i].topLeft;\n\t\t\t\tconst end = predictions[i].bottomRight;\n\t\t\t\tconst size = [end[0] - start[0], end[1] - start[1]];\n\t\t\t\t// Render a bounding box over faces\n\t\t\t\tcanvasCtx.beginPath();\n\t\t\t\tcanvasCtx.rect(start[0], start[1], size[0], size[1]);\n\t\t\t\tconsole.log(predictions)\n\t\t\t\tconsole.log(\"trash\")\n\t\t\t\tcanvasCtx.strokeStyle = 'black';\n\t\t\t\tcanvasCtx.stroke(); \n\t\t\t\tvar hidden_canvas = document.createElement('canvas');\n\t\t\t\thidden_canvas.width = size[0]\n\t\t\t\thidden_canvas.height = size[1]\n\t\t\t\tvar newContent = hidden_canvas.getContext('2d');\n\t\t\t\tnewContent.translate(hidden_canvas.width, 0);\n\t\t\t\tnewContent.scale(-1, 1);\n\t\t\t\tnewContent.drawImage(canvas, start[0], start[1], start[0]+size[0], start[1]+size[1], 0, 0, size[0],size[1])\n\t\t\t\tvar link=document.createElement(\"a\");\n\t            link.href=hidden_canvas.toDataURL('image/png');   //function blocks CORS\n\t            link.download = 'screenshot.jpg';\n\t            link.click();\n\t            break\t      \n\t    \t}\n\t    }\n\t}\n\n\n\trender(){\n\t\treturn(\n\t\t\t<Container fluid>\n\t\t\t\t\t<Jumbotron>\n\t\t\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t  \t\t<h1 className=\"title\">smileAI</h1>\n\t\t\t\t\t  \t</Row>\n\t\t\t\t\t  \t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t\t  <p>\n\t\t\t\t\t\t    Simple AI that detects smiles. Positive vibes only.\n\t\t\t\t\t\t  </p>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<small>Neural network built without any deep learning libraries (only numpy).</small>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Jumbotron>\n\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t    <Col xs={6}>\n\t\t\t\t    \t<canvas id=\"videoCanvas\"></canvas>\n\t\t\t\t    \t<video id=\"video\" autoPlay={true} playsInline={true} src={this.state.video} className=\"video\"></video>\n\t\t\t\t    </Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\n\t\t)\n\t}\n}\n\nexport default Camera;"]},"metadata":{},"sourceType":"module"}