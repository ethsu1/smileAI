{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Desktop/smileai/src/Camera.js\";\nimport React from 'react';\nimport { Container, Row, Col, Jumbotron } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport '@tensorflow/tfjs-backend-webgl';\nimport './styles.css';\n\nclass Camera extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      video: null\n    };\n    this.loadFaceDetect = this.loadFaceDetect.bind(this);\n  }\n\n  async componentDidMount() {\n    var constraints = {\n      audio: true,\n      video: {\n        width: 720,\n        height: 500\n      }\n    };\n    var loadModel = this.loadFaceDetect;\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      var video = document.querySelector(\"video\");\n      video.srcObject = stream;\n\n      video.onloadedmetadata = () => {\n        video.play();\n      };\n\n      video.onloadeddata = () => loadModel();\n\n      video.onplay = () => {\n        setTime;\n      };\n    }).catch(function (err) {\n      console.log(\"no video\");\n      console.log(err);\n    });\n  }\n\n  async loadFaceDetect() {\n    const returnTensors = false;\n    const model = await blazeface.load();\n    const video = document.querySelector(\"video\");\n    const predictions = await model.estimateFaces(video, returnTensors);\n\n    if (predictions.length > 0) {\n      this.drawBox(predictions);\n    }\n  }\n\n  drawBox(predictions) {\n    var video = document.querySelector(\"#video\");\n    var canvas = document.querySelector(\"#videoCanvas\");\n    var ctx = canvas.getContext('2d');\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    for (let i = 0; i < predictions.length; i++) {\n      const start = predictions[i].topLeft;\n      const end = predictions[i].bottomRight;\n      const size = [end[0] - start[0], end[1] - start[1]]; // Render a rectangle over each detected face.\n\n      ctx.fillRect(start[0], start[1], size[0], size[1]);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 10\n      }\n    }, \"smileAI\")), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, \"Simple AI that detects smiles. Positive vibes only.\")), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"Neural network built without any deep learning libraries (only numpy).\")))), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"videoCanvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"video\", {\n      id: \"video\",\n      autoPlay: true,\n      src: this.state.video,\n      style: \"display: none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 10\n      }\n    }))));\n  }\n\n}\n\nexport default Camera;","map":{"version":3,"sources":["/Users/ethan/Desktop/smileai/src/Camera.js"],"names":["React","Container","Row","Col","Jumbotron","blazeface","Camera","Component","constructor","props","state","video","loadFaceDetect","bind","componentDidMount","constraints","audio","width","height","loadModel","navigator","mediaDevices","getUserMedia","then","stream","document","querySelector","srcObject","onloadedmetadata","play","onloadeddata","onplay","setTime","catch","err","console","log","returnTensors","model","load","predictions","estimateFaces","length","drawBox","canvas","ctx","getContext","videoWidth","videoHeight","drawImage","i","start","topLeft","end","bottomRight","size","fillRect","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Container, Row, Col, Jumbotron} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport '@tensorflow/tfjs-backend-webgl';\nimport './styles.css';\nclass Camera extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state ={\n\t\t\tvideo: null,\n\t\t}\n\t\tthis.loadFaceDetect = this.loadFaceDetect.bind(this)\n\t}\n\tasync componentDidMount(){\n\t\t\n    \tvar constraints = { audio: true, video: { width: 720, height: 500 } };\n    \tvar loadModel = this.loadFaceDetect;\n    \tnavigator.mediaDevices.getUserMedia(constraints)\n\n    \t.then((stream) => {\n\t        var video = document.querySelector(\"video\");\n\t        video.srcObject = stream;\n\t        video.onloadedmetadata = () => {\n\t        \tvideo.play();\n\t        };\n\t        video.onloadeddata = () => loadModel()\n\t        video.onplay = () => {\n\t        \tsetTime\n\t        }\n     \t})\n     \t.catch(function(err) {\n        \tconsole.log(\"no video\")\n        \tconsole.log(err)\n        }); \n\t}\n\n\tasync loadFaceDetect() {\n\t\tconst returnTensors = false;\n\t\tconst model = await blazeface.load();\n     \tconst video = document.querySelector(\"video\");\n\t\tconst predictions = await model.estimateFaces(video, returnTensors);\n\t\tif (predictions.length > 0) {\n    \t\tthis.drawBox(predictions)\n    \t}\n\t}\n\n\tdrawBox(predictions) {\n\t\tvar video = document.querySelector(\"#video\");\n    \tvar canvas = document.querySelector(\"#videoCanvas\");\n\t\tvar ctx = canvas.getContext('2d');\n\n\n    \tcanvas.width = video.videoWidth;\n    \tcanvas.height = video.videoHeight;\n    \tctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    \tfor (let i = 0; i < predictions.length; i++) {\n\t      const start = predictions[i].topLeft;\n\t      const end = predictions[i].bottomRight;\n\t      const size = [end[0] - start[0], end[1] - start[1]];\n\n\t      // Render a rectangle over each detected face.\n\t      ctx.fillRect(start[0], start[1], size[0], size[1]);\n    \t}\n\t}\n\n\n\trender(){\n\t\treturn(\n\t\t\t<Container fluid>\n\t\t\t\t\t<Jumbotron>\n\t\t\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t  \t\t<h1 className=\"title\">smileAI</h1>\n\t\t\t\t\t  \t</Row>\n\t\t\t\t\t  \t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t\t  <p>\n\t\t\t\t\t\t    Simple AI that detects smiles. Positive vibes only.\n\t\t\t\t\t\t  </p>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<small>Neural network built without any deep learning libraries (only numpy).</small>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Jumbotron>\n\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t    <Col xs={6}>\n\t\t\t\t    \t<canvas id=\"videoCanvas\"></canvas>\n\t\t\t\t    \t<video id=\"video\" autoPlay={true} src={this.state.video} style=\"display: none\"></video>\n\t\t\t\t    </Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\n\t\t)\n\t}\n}\n\nexport default Camera;"]},"metadata":{},"sourceType":"module"}